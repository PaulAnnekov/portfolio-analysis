{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../node_modules/decimal.js/decimal.js","webpack:///./app.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_RESULT__","globalScope","Decimal","inexact","quadrant","EXP_LIMIT","MAX_DIGITS","NUMERALS","LN10","PI","DEFAULTS","precision","rounding","modulo","toExpNeg","toExpPos","minE","maxE","crypto","external","decimalError","invalidArgument","precisionLimitExceeded","cryptoUnavailable","mathfloor","Math","floor","mathpow","pow","isBinary","isHex","isOctal","isDecimal","BASE","LOG_BASE","LN10_PRECISION","length","PI_PRECISION","P","digitsToString","k","ws","indexOfLastWord","str","w","getZeroString","checkInt32","min","max","Error","checkRoundingDigits","rm","repeating","di","rd","ceil","convertBase","baseIn","baseOut","j","arrL","arr","strL","indexOf","charAt","reverse","absoluteValue","abs","x","this","constructor","finalise","e","comparedTo","cmp","y","xdL","ydL","xd","yd","xs","ys","NaN","cosine","cos","pr","Ctor","sd","len","toString","taylorSeries","times","cos2x","minus","plus","toLessThanHalfPi","neg","cubeRoot","cbrt","rep","t3","t3plusx","isFinite","isZero","toExponential","slice","divide","eq","decimalPlaces","dp","dividedBy","div","dividedToIntegerBy","divToInt","equals","greaterThan","gt","greaterThanOrEqualTo","gte","hyperbolicCosine","cosh","one","cosh2_x","d8","hyperbolicSine","sinh","sqrt","sinh2_x","d5","d16","d20","hyperbolicTangent","tanh","inverseCosine","acos","halfPi","isNeg","getPi","asin","inverseHyperbolicCosine","acosh","lte","ln","inverseHyperbolicSine","asinh","inverseHyperbolicTangent","atanh","wpr","xsd","inverseSine","atan","inverseTangent","px","x2","isInteger","isInt","isNaN","isNegative","isPositive","isPos","lessThan","lt","lessThanOrEqualTo","logarithm","log","base","isBase10","denominator","inf","num","naturalLogarithm","getLn10","sub","xe","xLTy","push","pop","shift","getBase10Exponent","mod","q","naturalExponential","exp","negated","add","carry","unshift","z","getPrecision","round","sine","sin","sin2_x","squareRoot","tangent","tan","mul","rL","toBinary","toStringBinary","toDecimalPlaces","toDP","finiteToString","toFixed","toFraction","maxD","d0","d1","d2","n0","n1","toHexadecimal","toHex","toNearest","toNumber","toOctal","toPower","yn","intPow","toPrecision","toSignificantDigits","toSD","truncated","trunc","valueOf","toJSON","multiplyInteger","temp","compare","a","b","aL","bL","subtract","logBase","more","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","sign","isTruncated","digits","roundUp","xdi","out","isExp","nonFiniteToString","zs","truncate","isOdd","maxOrMin","args","ltgt","guard","sum","c0","numerator","x1","String","parseDecimal","replace","search","substring","charCodeAt","parseOther","divisor","isFloat","test","toLowerCase","isHyperbolic","u","pi","atan2","config","obj","v","useDefaults","defaults","ps","getRandomValues","randomBytes","hypot","arguments","isDecimalInstance","log2","log10","random","Uint32Array","copy","clone","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","set","undefined","prices","divs","proxy","res","fetch","headers","json","forEach","decimal_js__WEBPACK_IMPORTED_MODULE_0___default","Date","getFullYear","getMonth","getDate","toISO","main"],"mappings":"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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/*! decimal.js v10.0.2 https://github.com/MikeMcl/decimal.js/LICENCE */\r\n;(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*\r\n   *  decimal.js v10.0.2\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The maximum exponent magnitude.\r\n    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\n  var EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n    // Base conversion alphabet.\r\n    NUMERALS = '0123456789abcdef',\r\n\r\n    // The natural logarithm of 10 (1025 digits).\r\n    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n    // Pi (1025 digits).\r\n    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    DEFAULTS = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used when rounding to `precision`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN  6 The IEEE 754 remainder function.\r\n      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n      //\r\n      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n      // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n      // be used, but they may not give useful results.\r\n      modulo: 1,                             // 0 to 9\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // JavaScript numbers: -324  (5e-324)\r\n      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      crypto: false                          // true/false\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    Decimal, inexact, noConflict, quadrant,\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n    cryptoUnavailable = decimalError + 'crypto unavailable',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n    LN10_PRECISION = LN10.length - 1,\r\n    PI_PRECISION = PI.length - 1,\r\n\r\n    // Decimal.prototype object\r\n    P = { name: '[object Decimal]' };\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue             abs\r\n   *  ceil\r\n   *  comparedTo                cmp\r\n   *  cosine                    cos\r\n   *  cubeRoot                  cbrt\r\n   *  decimalPlaces             dp\r\n   *  dividedBy                 div\r\n   *  dividedToIntegerBy        divToInt\r\n   *  equals                    eq\r\n   *  floor\r\n   *  greaterThan               gt\r\n   *  greaterThanOrEqualTo      gte\r\n   *  hyperbolicCosine          cosh\r\n   *  hyperbolicSine            sinh\r\n   *  hyperbolicTangent         tanh\r\n   *  inverseCosine             acos\r\n   *  inverseHyperbolicCosine   acosh\r\n   *  inverseHyperbolicSine     asinh\r\n   *  inverseHyperbolicTangent  atanh\r\n   *  inverseSine               asin\r\n   *  inverseTangent            atan\r\n   *  isFinite\r\n   *  isInteger                 isInt\r\n   *  isNaN\r\n   *  isNegative                isNeg\r\n   *  isPositive                isPos\r\n   *  isZero\r\n   *  lessThan                  lt\r\n   *  lessThanOrEqualTo         lte\r\n   *  logarithm                 log\r\n   *  [maximum]                 [max]\r\n   *  [minimum]                 [min]\r\n   *  minus                     sub\r\n   *  modulo                    mod\r\n   *  naturalExponential        exp\r\n   *  naturalLogarithm          ln\r\n   *  negated                   neg\r\n   *  plus                      add\r\n   *  precision                 sd\r\n   *  round\r\n   *  sine                      sin\r\n   *  squareRoot                sqrt\r\n   *  tangent                   tan\r\n   *  times                     mul\r\n   *  toBinary\r\n   *  toDecimalPlaces           toDP\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toFraction\r\n   *  toHexadecimal             toHex\r\n   *  toNearest\r\n   *  toNumber\r\n   *  toOctal\r\n   *  toPower                   pow\r\n   *  toPrecision\r\n   *  toSignificantDigits       toSD\r\n   *  toString\r\n   *  truncated                 trunc\r\n   *  valueOf                   toJSON\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of positive Infinity.\r\n   *\r\n   */\r\n  P.ceil = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value,\r\n   *   NaN  if the value of either Decimal is NaN.\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this,\r\n      xd = x.d,\r\n      yd = (y = new x.constructor(y)).d,\r\n      xs = x.s,\r\n      ys = y.s;\r\n\r\n    // Either NaN or ±Infinity?\r\n    if (!xd || !yd) {\r\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Either zero?\r\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n    // Signs differ?\r\n    if (xs !== ys) return xs;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * cos(0)         = 1\r\n   * cos(-0)        = 1\r\n   * cos(Infinity)  = NaN\r\n   * cos(-Infinity) = NaN\r\n   * cos(NaN)       = NaN\r\n   *\r\n   */\r\n  P.cosine = P.cos = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.d) return new Ctor(NaN);\r\n\r\n    // cos(0) = cos(-0) = 1\r\n    if (!x.d[0]) return new Ctor(1);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *\r\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   *  cbrt(0)  =  0\r\n   *  cbrt(-0) = -0\r\n   *  cbrt(1)  =  1\r\n   *  cbrt(-1) = -1\r\n   *  cbrt(N)  =  N\r\n   *  cbrt(-I) = -I\r\n   *  cbrt(I)  =  I\r\n   *\r\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n   *\r\n   */\r\n  P.cubeRoot = P.cbrt = function () {\r\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = x.s * Math.pow(x.s * x, 1 / 3);\r\n\r\n     // Math.cbrt underflow/overflow?\r\n     // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n    if (!s || Math.abs(s) == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      e = x.e;\r\n\r\n      // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n      s = Math.pow(n, 1 / 3);\r\n\r\n      // Rarely, e may be one less than the result exponent value.\r\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n      r.s = x.s;\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Halley's method.\r\n    // TODO? Compare Newton's method.\r\n    for (;;) {\r\n      t = r;\r\n      t3 = t.times(t).times(t);\r\n      t3plusx = t3.plus(x);\r\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n        // , i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var w,\r\n      d = this.d,\r\n      n = NaN;\r\n\r\n    if (d) {\r\n      w = d.length - 1;\r\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      w = d[w];\r\n      if (w) for (; w % 10 == 0; w /= 10) n--;\r\n      if (n < 0) n = 0;\r\n    }\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.divToInt = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of negative Infinity.\r\n   *\r\n   */\r\n  P.floor = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 3);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    var k = this.cmp(y);\r\n    return k == 1 || k === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [1, Infinity]\r\n   *\r\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n   *\r\n   * cosh(0)         = 1\r\n   * cosh(-0)        = 1\r\n   * cosh(Infinity)  = Infinity\r\n   * cosh(-Infinity) = Infinity\r\n   * cosh(NaN)       = NaN\r\n   *\r\n   *  x        time taken (ms)   result\r\n   * 1000      9                 9.8503555700852349694e+433\r\n   * 10000     25                4.4034091128314607936e+4342\r\n   * 100000    171               1.4033316802130615897e+43429\r\n   * 1000000   3817              1.5166076984010437725e+434294\r\n   * 10000000  abandoned after 2 minute wait\r\n   *\r\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicCosine = P.cosh = function () {\r\n    var k, n, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      one = new Ctor(1);\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n    if (x.isZero()) return one;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    // TODO? Estimation reused from cosine() and may not be optimal here.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      n = Math.pow(4, -k).toString();\r\n    } else {\r\n      k = 16;\r\n      n = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n    // Reverse argument reduction\r\n    var cosh2_x,\r\n      i = k,\r\n      d8 = new Ctor(8);\r\n    for (; i--;) {\r\n      cosh2_x = x.times(x);\r\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n    }\r\n\r\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n   *\r\n   * sinh(0)         = 0\r\n   * sinh(-0)        = -0\r\n   * sinh(Infinity)  = Infinity\r\n   * sinh(-Infinity) = -Infinity\r\n   * sinh(NaN)       = NaN\r\n   *\r\n   * x        time taken (ms)\r\n   * 10       2 ms\r\n   * 100      5 ms\r\n   * 1000     14 ms\r\n   * 10000    82 ms\r\n   * 100000   886 ms            1.4033316802130615897e+43429\r\n   * 200000   2613 ms\r\n   * 300000   5407 ms\r\n   * 400000   8824 ms\r\n   * 500000   13026 ms          8.7080643612718084129e+217146\r\n   * 1000000  48543 ms\r\n   *\r\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicSine = P.sinh = function () {\r\n    var k, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n    } else {\r\n\r\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n      // 3 multiplications and 1 addition\r\n\r\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n      // 4 multiplications and 2 additions\r\n\r\n      // Estimate the optimum number of times to use the argument reduction.\r\n      k = 1.4 * Math.sqrt(len);\r\n      k = k > 16 ? 16 : k | 0;\r\n\r\n      x = x.times(Math.pow(5, -k));\r\n\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n      // Reverse argument reduction\r\n      var sinh2_x,\r\n        d5 = new Ctor(5),\r\n        d16 = new Ctor(16),\r\n        d20 = new Ctor(20);\r\n      for (; k--;) {\r\n        sinh2_x = x.times(x);\r\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n      }\r\n    }\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * tanh(x) = sinh(x) / cosh(x)\r\n   *\r\n   * tanh(0)         = 0\r\n   * tanh(-0)        = -0\r\n   * tanh(Infinity)  = 1\r\n   * tanh(-Infinity) = -1\r\n   * tanh(NaN)       = NaN\r\n   *\r\n   */\r\n  P.hyperbolicTangent = P.tanh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 7;\r\n    Ctor.rounding = 1;\r\n\r\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n   * this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [0, pi]\r\n   *\r\n   * acos(x) = pi/2 - asin(x)\r\n   *\r\n   * acos(0)       = pi/2\r\n   * acos(-0)      = pi/2\r\n   * acos(1)       = 0\r\n   * acos(-1)      = pi\r\n   * acos(1/2)     = pi/3\r\n   * acos(-1/2)    = 2*pi/3\r\n   * acos(|x| > 1) = NaN\r\n   * acos(NaN)     = NaN\r\n   *\r\n   */\r\n  P.inverseCosine = P.acos = function () {\r\n    var halfPi,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      k = x.abs().cmp(1),\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n      return k === 0\r\n        // |x| is 1\r\n        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n        // |x| > 1 or x is NaN\r\n        : new Ctor(NaN);\r\n    }\r\n\r\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.asin();\r\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return halfPi.minus(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [1, Infinity]\r\n   * Range: [0, Infinity]\r\n   *\r\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n   *\r\n   * acosh(x < 1)     = NaN\r\n   * acosh(NaN)       = NaN\r\n   * acosh(Infinity)  = Infinity\r\n   * acosh(-Infinity) = NaN\r\n   * acosh(0)         = NaN\r\n   * acosh(-0)        = NaN\r\n   * acosh(1)         = 0\r\n   * acosh(-1)        = NaN\r\n   *\r\n   */\r\n  P.inverseHyperbolicCosine = P.acosh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n    if (!x.isFinite()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n   *\r\n   * asinh(NaN)       = NaN\r\n   * asinh(Infinity)  = Infinity\r\n   * asinh(-Infinity) = -Infinity\r\n   * asinh(0)         = 0\r\n   * asinh(-0)        = -0\r\n   *\r\n   */\r\n  P.inverseHyperbolicSine = P.asinh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n   *\r\n   * atanh(|x| > 1)   = NaN\r\n   * atanh(NaN)       = NaN\r\n   * atanh(Infinity)  = NaN\r\n   * atanh(-Infinity) = NaN\r\n   * atanh(0)         = 0\r\n   * atanh(-0)        = -0\r\n   * atanh(1)         = Infinity\r\n   * atanh(-1)        = -Infinity\r\n   *\r\n   */\r\n  P.inverseHyperbolicTangent = P.atanh = function () {\r\n    var pr, rm, wpr, xsd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    xsd = x.sd();\r\n\r\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n    Ctor.precision = wpr = xsd - x.e;\r\n\r\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n    Ctor.precision = pr + 4;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.ln();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(0.5);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n   *\r\n   * asin(0)       = 0\r\n   * asin(-0)      = -0\r\n   * asin(1/2)     = pi/6\r\n   * asin(-1/2)    = -pi/6\r\n   * asin(1)       = pi/2\r\n   * asin(-1)      = -pi/2\r\n   * asin(|x| > 1) = NaN\r\n   * asin(NaN)     = NaN\r\n   *\r\n   * TODO? Compare performance of Taylor series.\r\n   *\r\n   */\r\n  P.inverseSine = P.asin = function () {\r\n    var halfPi, k,\r\n      pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    k = x.abs().cmp(1);\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n\r\n      // |x| is 1\r\n      if (k === 0) {\r\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        halfPi.s = x.s;\r\n        return halfPi;\r\n      }\r\n\r\n      // |x| > 1 or x is NaN\r\n      return new Ctor(NaN);\r\n    }\r\n\r\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n   *\r\n   * atan(0)         = 0\r\n   * atan(-0)        = -0\r\n   * atan(1)         = pi/4\r\n   * atan(-1)        = -pi/4\r\n   * atan(Infinity)  = pi/2\r\n   * atan(-Infinity) = -pi/2\r\n   * atan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.inverseTangent = P.atan = function () {\r\n    var i, j, k, n, px, t, r, wpr, x2,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (!x.isFinite()) {\r\n      if (!x.s) return new Ctor(NaN);\r\n      if (pr + 4 <= PI_PRECISION) {\r\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        r.s = x.s;\r\n        return r;\r\n      }\r\n    } else if (x.isZero()) {\r\n      return new Ctor(x);\r\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n\r\n    Ctor.precision = wpr = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n    // Argument reduction\r\n    // Ensure |x| < 0.42\r\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n    external = false;\r\n\r\n    j = Math.ceil(wpr / LOG_BASE);\r\n    n = 1;\r\n    x2 = x.times(x);\r\n    r = new Ctor(x);\r\n    px = x;\r\n\r\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n    for (; i !== -1;) {\r\n      px = px.times(x2);\r\n      t = r.minus(px.div(n += 2));\r\n\r\n      px = px.times(x2);\r\n      r = t.plus(px.div(n += 2));\r\n\r\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n    }\r\n\r\n    if (k) r = r.times(2 << (k - 1));\r\n\r\n    external = true;\r\n\r\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n   *\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.d;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isInt = function () {\r\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n   *\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isNeg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.isPos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.d && this.d[0] === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * If no base is specified, return log[10](arg).\r\n   *\r\n   * log[base](arg) = ln(arg) / ln(base)\r\n   *\r\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n   * otherwise:\r\n   *\r\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n   *\r\n   * log[-b](a)       = NaN\r\n   * log[0](a)        = NaN\r\n   * log[1](a)        = NaN\r\n   * log[NaN](a)      = NaN\r\n   * log[Infinity](a) = NaN\r\n   * log[b](0)        = -Infinity\r\n   * log[b](-0)       = -Infinity\r\n   * log[b](-a)       = NaN\r\n   * log[b](1)        = 0\r\n   * log[b](Infinity) = Infinity\r\n   * log[b](NaN)      = NaN\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var isBase10, d, denominator, k, inf, num, sd, r,\r\n      arg = this,\r\n      Ctor = arg.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding,\r\n      guard = 5;\r\n\r\n    // Default base is 10.\r\n    if (base == null) {\r\n      base = new Ctor(10);\r\n      isBase10 = true;\r\n    } else {\r\n      base = new Ctor(base);\r\n      d = base.d;\r\n\r\n      // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n      isBase10 = base.eq(10);\r\n    }\r\n\r\n    d = arg.d;\r\n\r\n    // Is arg negative, non-finite, 0 or 1?\r\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n    }\r\n\r\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n    // integer power of 10.\r\n    if (isBase10) {\r\n      if (d.length > 1) {\r\n        inf = true;\r\n      } else {\r\n        for (k = d[0]; k % 10 === 0;) k /= 10;\r\n        inf = k !== 1;\r\n      }\r\n    }\r\n\r\n    external = false;\r\n    sd = pr + guard;\r\n    num = naturalLogarithm(arg, sd);\r\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n    // The result will have 5 rounding digits.\r\n    r = divide(num, denominator, sd, 1);\r\n\r\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n    // calculate 10 further digits.\r\n    //\r\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n    // further digits, the last 14 are nines, round up and assume the result is exact.\r\n    // Also assume the result is exact if the last 14 are zero.\r\n    //\r\n    // Example of a result that will be incorrectly rounded:\r\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n    // place is still 2.6.\r\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n      do {\r\n        sd += 10;\r\n        num = naturalLogarithm(arg, sd);\r\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n        r = divide(num, denominator, sd, 1);\r\n\r\n        if (!inf) {\r\n\r\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n            r = finalise(r, pr + 1, 0);\r\n          }\r\n\r\n          break;\r\n        }\r\n      } while (checkRoundingDigits(r.d, k += 10, rm));\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.max = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'lt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.min = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'gt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return y negated if x is finite and y is ±Infinity.\r\n      else if (x.d) y.s = -y.s;\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with different signs.\r\n      // Return NaN if both are ±Infinity with the same sign.\r\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n    // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.plus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return y negated if x is zero and y is non-zero.\r\n      if (yd[0]) y.s = -y.s;\r\n\r\n      // Return x if y is zero and x is non-zero.\r\n      else if (xd[0]) y = new Ctor(x);\r\n\r\n      // Return zero if both are zero.\r\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n      else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    e = mathfloor(y.e / LOG_BASE);\r\n    xe = mathfloor(x.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of\r\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to `xd` if shorter.\r\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * The result depends on the modulo mode.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n    // Return x if y is ±Infinity or x is ±0.\r\n    if (!y.d || x.d && !x.d[0]) {\r\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n    }\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n\r\n    if (Ctor.modulo == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // result = x - q * y    where  0 <= result < abs(y)\r\n      q = divide(x, y.abs(), 0, 3, 1);\r\n      q.s *= y.s;\r\n    } else {\r\n      q = divide(x, y, 0, Ctor.modulo, 1);\r\n    }\r\n\r\n    q = q.times(y);\r\n\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return naturalExponential(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return naturalLogarithm(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with the same sign.\r\n      // Return NaN if both are ±Infinity with different signs.\r\n      // Return y if x is finite and y is ±Infinity.\r\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n     // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!yd[0]) y = new Ctor(x);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    k = mathfloor(x.e / LOG_BASE);\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var k,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    if (x.d) {\r\n      k = getPrecision(x.d);\r\n      if (z && x.e + 1 > k) k = x.e + 1;\r\n    } else {\r\n      k = NaN;\r\n    }\r\n\r\n    return k;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.round = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   *\r\n   * sin(0)         = 0\r\n   * sin(-0)        = -0\r\n   * sin(Infinity)  = NaN\r\n   * sin(-Infinity) = NaN\r\n   * sin(NaN)       = NaN\r\n   *\r\n   */\r\n  P.sine = P.sin = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N)  =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I)  =  I\r\n   *  sqrt(0)  =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, sd, r, rep, t,\r\n      x = this,\r\n      d = x.d,\r\n      e = x.e,\r\n      s = x.s,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !d || !d[0]) {\r\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n    }\r\n\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(d);\r\n\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '1e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * tan(0)         = 0\r\n   * tan(-0)        = -0\r\n   * tan(Infinity)  = NaN\r\n   * tan(-Infinity) = NaN\r\n   * tan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.tangent = P.tan = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.sin();\r\n    x.s = 1;\r\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    y.s *= x.s;\r\n\r\n     // If either is NaN, ±Infinity or ±0...\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n        // Return NaN if either is NaN.\r\n        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n        ? NaN\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        // Return ±0 if either is ±0.\r\n        : !xd || !yd ? y.s / 0 : y.s * 0);\r\n    }\r\n\r\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = getBase10Exponent(r, e);\r\n\r\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toBinary = function (sd, rm) {\r\n    return toStringBinary(this, 2, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return finalise(x, dp + x.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), dp + 1, rm);\r\n      str = finiteToString(x, true, dp + 1);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n      str = finiteToString(y, false, dp + y.e + 1);\r\n    }\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n   * numerator and an integer denominator.\r\n   *\r\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n   * value necessary to represent the number exactly.\r\n   *\r\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n   *\r\n   */\r\n  P.toFraction = function (maxD) {\r\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n      x = this,\r\n      xd = x.d,\r\n      Ctor = x.constructor;\r\n\r\n    if (!xd) return new Ctor(x);\r\n\r\n    n1 = d0 = new Ctor(1);\r\n    d1 = n0 = new Ctor(0);\r\n\r\n    d = new Ctor(d1);\r\n    e = d.e = getPrecision(xd) - x.e - 1;\r\n    k = e % LOG_BASE;\r\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n    if (maxD == null) {\r\n\r\n      // d is 10**e, the minimum max-denominator needed.\r\n      maxD = e > 0 ? d : n1;\r\n    } else {\r\n      n = new Ctor(maxD);\r\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n    }\r\n\r\n    external = false;\r\n    n = new Ctor(digitsToString(xd));\r\n    pr = Ctor.precision;\r\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n    for (;;)  {\r\n      q = divide(n, d, 0, 1, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.cmp(maxD) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      d2 = n1;\r\n      n1 = n0.plus(q.times(d2));\r\n      n0 = d2;\r\n      d2 = d;\r\n      d = n.minus(q.times(d2));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n        ? [n1, d1] : [n0, d0];\r\n\r\n    Ctor.precision = pr;\r\n    external = true;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toHexadecimal = P.toHex = function (sd, rm) {\r\n    return toStringBinary(this, 16, sd, rm);\r\n  };\r\n\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n   *\r\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n   * or `y` is NaN, in which case the return value will be also be NaN.\r\n   *\r\n   * The return value is not affected by the value of `precision`.\r\n   *\r\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toNearest() rounding mode not an integer: {rm}'\r\n   * 'toNearest() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toNearest = function (y, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (y == null) {\r\n\r\n      // If x is not finite, return x.\r\n      if (!x.d) return x;\r\n\r\n      y = new Ctor(1);\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      y = new Ctor(y);\r\n      if (rm === void 0) {\r\n        rm = Ctor.rounding;\r\n      } else {\r\n        checkInt32(rm, 0, 8);\r\n      }\r\n\r\n      // If x is not finite, return x if y is not NaN, else NaN.\r\n      if (!x.d) return y.s ? x : y;\r\n\r\n      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n      if (!y.d) {\r\n        if (y.s) y.s = x.s;\r\n        return y;\r\n      }\r\n    }\r\n\r\n    // If y is not zero, calculate the nearest multiple of y to x.\r\n    if (y.d[0]) {\r\n      external = false;\r\n      x = divide(x, y, 0, rm, 1).times(y);\r\n      external = true;\r\n      finalise(x);\r\n\r\n    // If y is zero, return zero with the sign of x.\r\n    } else {\r\n      y.s = x.s;\r\n      x = y;\r\n    }\r\n\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   * Zero keeps its sign.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toOctal = function (sd, rm) {\r\n    return toStringBinary(this, 8, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n   * to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * ECMAScript compliant.\r\n   *\r\n   *   pow(x, NaN)                           = NaN\r\n   *   pow(x, ±0)                            = 1\r\n\r\n   *   pow(NaN, non-zero)                    = NaN\r\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n   *   pow(abs(x) > 1, -Infinity)            = +0\r\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n   *   pow(abs(x) < 1, +Infinity)            = +0\r\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n   *   pow(+Infinity, y > 0)                 = +Infinity\r\n   *   pow(+Infinity, y < 0)                 = +0\r\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n   *   pow(-Infinity, odd integer < 0)       = -0\r\n   *   pow(-Infinity, even integer < 0)      = +0\r\n   *   pow(+0, y > 0)                        = +0\r\n   *   pow(+0, y < 0)                        = +Infinity\r\n   *   pow(-0, odd integer > 0)              = -0\r\n   *   pow(-0, even integer > 0)             = +0\r\n   *   pow(-0, odd integer < 0)              = -Infinity\r\n   *   pow(-0, even integer < 0)             = +Infinity\r\n   *   pow(finite x < 0, finite non-integer) = NaN\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n   * probability of an incorrectly rounded result\r\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n   * i.e. 1 in 250,000,000,000,000\r\n   *\r\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, rm, s,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // Either ±Infinity, NaN or ±0?\r\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (x.eq(1)) return x;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n    // y exponent\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = intPow(Ctor, x, k, pr);\r\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n    }\r\n\r\n    s = x.s;\r\n\r\n    // if x is negative\r\n    if (s < 0) {\r\n\r\n      // if y is not an integer\r\n      if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n      // Result is positive if x is negative and the last digit of integer y is even.\r\n      if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n      // if x.eq(-1)\r\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n        x.s = s;\r\n        return x;\r\n      }\r\n    }\r\n\r\n    // Estimate result exponent.\r\n    // x^y = 10^e,  where e = y * log10(x)\r\n    // log10(x) = log10(x_significand) + x_exponent\r\n    // log10(x_significand) = ln(x_significand) / ln(10)\r\n    k = mathpow(+x, yn);\r\n    e = k == 0 || !isFinite(k)\r\n      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n      : new Ctor(k + '').e;\r\n\r\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n    // Overflow/underflow?\r\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n    external = false;\r\n    Ctor.rounding = x.s = 1;\r\n\r\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n    // new Decimal(2.32456).pow('2087987436534566.46411')\r\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n    k = Math.min(12, (e + '').length);\r\n\r\n    // r = x^y = exp(y*ln(x))\r\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n    if (r.d) {\r\n\r\n      // Truncate to the required precision plus five rounding digits.\r\n      r = finalise(r, pr + 5, 1);\r\n\r\n      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n      // the result.\r\n      if (checkRoundingDigits(r.d, pr, rm)) {\r\n        e = pr + 10;\r\n\r\n        // Truncate to the increased precision plus five rounding digits.\r\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n      }\r\n    }\r\n\r\n    r.s = s;\r\n    external = true;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), sd, rm);\r\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toSD() digits out of range: {sd}'\r\n   * 'toSD() digits not an integer: {sd}'\r\n   * 'toSD() rounding mode not an integer: {rm}'\r\n   * 'toSD() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return finalise(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n   *\r\n   */\r\n  P.truncated = P.trunc = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   * Unlike `toString`, negative zero will include the minus sign.\r\n   *\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n  // Add aliases to match BigDecimal method names.\r\n  // P.add = P.plus;\r\n  P.subtract = P.minus;\r\n  P.multiply = P.times;\r\n  P.divide = P.div;\r\n  P.remainder = P.mod;\r\n  P.compareTo = P.cmp;\r\n  P.negate = P.neg;\r\n   */\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n   *                           finiteToString, naturalExponential, naturalLogarithm\r\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n   *  convertBase              toStringBinary, parseOther\r\n   *  cos                      P.cos\r\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n   *                           taylorSeries, atan2, parseOther\r\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n   *                           naturalLogarithm, ceil, floor, round, trunc\r\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n   *                           toStringBinary\r\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n   *  getLn10                  P.logarithm, naturalLogarithm\r\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n   *  getPrecision             P.precision, P.toFraction\r\n   *  getZeroString            digitsToString, finiteToString\r\n   *  intPow                   P.toPower, parseOther\r\n   *  isOdd                    toLessThanHalfPi\r\n   *  maxOrMin                 max, min\r\n   *  naturalExponential       P.naturalExponential, P.toPower\r\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n   *                           P.toPower, naturalExponential\r\n   *  nonFiniteToString        finiteToString, toStringBinary\r\n   *  parseDecimal             Decimal\r\n   *  parseOther               Decimal\r\n   *  sin                      P.sin\r\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n   *  toLessThanHalfPi         P.cos, P.sin\r\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n   *  truncate                 intPow\r\n   *\r\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n   */\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n   * `repeating == null` if caller is `log` or `pow`,\r\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n   */\r\n  function checkRoundingDigits(d, i, rm, repeating) {\r\n    var di, k, r, rd;\r\n\r\n    // Get the length of the first word of the array d.\r\n    for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n    // Is the rounding digit in the first word of d?\r\n    if (--i < 0) {\r\n      i += LOG_BASE;\r\n      di = 0;\r\n    } else {\r\n      di = Math.ceil((i + 1) / LOG_BASE);\r\n      i %= LOG_BASE;\r\n    }\r\n\r\n    // i is the index (0 - 6) of the rounding digit.\r\n    // E.g. if within the word 3487563 the first rounding digit is 5,\r\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n    k = mathpow(10, LOG_BASE - i);\r\n    rd = d[di] % k | 0;\r\n\r\n    if (repeating == null) {\r\n      if (i < 3) {\r\n        if (i == 0) rd = rd / 100 | 0;\r\n        else if (i == 1) rd = rd / 10 | 0;\r\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n      } else {\r\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n      }\r\n    } else {\r\n      if (i < 4) {\r\n        if (i == 0) rd = rd / 1000 | 0;\r\n        else if (i == 1) rd = rd / 100 | 0;\r\n        else if (i == 2) rd = rd / 10 | 0;\r\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n      } else {\r\n        r = ((repeating || rm < 4) && rd + 1 == k ||\r\n        (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  // Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\r\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n  function convertBase(str, baseIn, baseOut) {\r\n    var j,\r\n      arr = [0],\r\n      arrL,\r\n      i = 0,\r\n      strL = str.length;\r\n\r\n    for (; i < strL;) {\r\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n      for (j = 0; j < arr.length; j++) {\r\n        if (arr[j] > baseOut - 1) {\r\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n          arr[j + 1] += arr[j] / baseOut | 0;\r\n          arr[j] %= baseOut;\r\n        }\r\n      }\r\n    }\r\n\r\n    return arr.reverse();\r\n  }\r\n\r\n\r\n  /*\r\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function cosine(Ctor, x) {\r\n    var k, y,\r\n      len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      y = Math.pow(4, -k).toString();\r\n    } else {\r\n      k = 16;\r\n      y = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    Ctor.precision += k;\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n    // Reverse argument reduction\r\n    for (var i = k; i--;) {\r\n      var cos2x = x.times(x);\r\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n    }\r\n\r\n    Ctor.precision -= k;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Perform division in the specified base.\r\n   */\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k, base) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % base | 0;\r\n        carry = temp / base | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, rm, dp, base) {\r\n      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n        yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n      }\r\n\r\n      if (base) {\r\n        logBase = 1;\r\n        e = x.e - y.e;\r\n      } else {\r\n        base = BASE;\r\n        logBase = LOG_BASE;\r\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n      }\r\n\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n      if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n        rm = Ctor.rounding;\r\n      } else if (dp) {\r\n        sd = pr + (x.e - y.e) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) {\r\n        qd.push(1);\r\n        more = true;\r\n      } else {\r\n\r\n        // Convert precision in number of base 10 digits to base 1e7 digits.\r\n        sd = sd / logBase + 2 | 0;\r\n        i = 0;\r\n\r\n        // divisor < 1e7\r\n        if (yL == 1) {\r\n          k = 0;\r\n          yd = yd[0];\r\n          sd++;\r\n\r\n          // k is the carry.\r\n          for (; (i < xL || k) && sd--; i++) {\r\n            t = k * base + (xd[i] || 0);\r\n            qd[i] = t / yd | 0;\r\n            k = t % yd | 0;\r\n          }\r\n\r\n          more = k || i < xL;\r\n\r\n        // divisor >= 1e7\r\n        } else {\r\n\r\n          // Normalise xd and yd so highest order digit of yd is >= base/2\r\n          k = base / (yd[0] + 1) | 0;\r\n\r\n          if (k > 1) {\r\n            yd = multiplyInteger(yd, k, base);\r\n            xd = multiplyInteger(xd, k, base);\r\n            yL = yd.length;\r\n            xL = xd.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xd.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL;) rem[remL++] = 0;\r\n\r\n          yz = yd.slice();\r\n          yz.unshift(0);\r\n          yd0 = yd[0];\r\n\r\n          if (yd[1] >= base / 2) ++yd0;\r\n\r\n          do {\r\n            k = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, k.\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // k will be how many times the divisor goes into the current remainder.\r\n              k = rem0 / yd0 | 0;\r\n\r\n              //  Algorithm:\r\n              //  1. product = divisor * trial digit (k)\r\n              //  2. if product > remainder: product -= divisor, k--\r\n              //  3. remainder -= product\r\n              //  4. if product was < remainder at 2:\r\n              //    5. compare new remainder and divisor\r\n              //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n              if (k > 1) {\r\n                if (k >= base) k = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiplyInteger(yd, k, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                cmp = compare(prod, rem, prodL, remL);\r\n\r\n                // product > remainder.\r\n                if (cmp == 1) {\r\n                  k--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n                }\r\n              } else {\r\n\r\n                // cmp is -1.\r\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n                if (k == 0) cmp = k = 1;\r\n                prod = yd.slice();\r\n              }\r\n\r\n              prodL = prod.length;\r\n              if (prodL < remL) prod.unshift(0);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n\r\n              // If product was < previous remainder.\r\n              if (cmp == -1) {\r\n                remL = rem.length;\r\n\r\n                // Compare divisor and new remainder.\r\n                cmp = compare(yd, rem, yL, remL);\r\n\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                if (cmp < 1) {\r\n                  k++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\r\n                }\r\n              }\r\n\r\n              remL = rem.length;\r\n            } else if (cmp === 0) {\r\n              k++;\r\n              rem = [0];\r\n            }    // if cmp === 1, k will be 0\r\n\r\n            // Add the next digit, k, to the result array.\r\n            qd[i++] = k;\r\n\r\n            // Update the remainder.\r\n            if (cmp && rem[0]) {\r\n              rem[remL++] = xd[xi] || 0;\r\n            } else {\r\n              rem = [xd[xi]];\r\n              remL = 1;\r\n            }\r\n\r\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n          more = rem[0] !== void 0;\r\n        }\r\n\r\n        // Leading zero?\r\n        if (!qd[0]) qd.shift();\r\n      }\r\n\r\n      // logBase is 1 when divide is being used for base conversion.\r\n      if (logBase == 1) {\r\n        q.e = e;\r\n        inexact = more;\r\n      } else {\r\n\r\n        // To calculate q.e, first get the number of digits of qd[0].\r\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n        q.e = i + e * logBase - 1;\r\n\r\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n   * Check for over/under-flow.\r\n   */\r\n   function finalise(x, sd, rm, isTruncated) {\r\n    var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n      Ctor = x.constructor;\r\n\r\n    // Don't round if sd is null or undefined.\r\n    out: if (sd != null) {\r\n      xd = x.d;\r\n\r\n      // Infinity/NaN.\r\n      if (!xd) return x;\r\n\r\n      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // w: the word of xd containing rd, a base 1e7 number.\r\n      // xdi: the index of w within xd.\r\n      // digits: the number of digits of w.\r\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n      // they had leading zeros)\r\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n      // Get the length of the first word of the digits array xd.\r\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n      i = sd - digits;\r\n\r\n      // Is the rounding digit in the first word of xd?\r\n      if (i < 0) {\r\n        i += LOG_BASE;\r\n        j = sd;\r\n        w = xd[xdi = 0];\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      } else {\r\n        xdi = Math.ceil((i + 1) / LOG_BASE);\r\n        k = xd.length;\r\n        if (xdi >= k) {\r\n          if (isTruncated) {\r\n\r\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n            for (; k++ <= xdi;) xd.push(0);\r\n            w = rd = 0;\r\n            digits = 1;\r\n            i %= LOG_BASE;\r\n            j = i - LOG_BASE + 1;\r\n          } else {\r\n            break out;\r\n          }\r\n        } else {\r\n          w = k = xd[xdi];\r\n\r\n          // Get the number of digits of w.\r\n          for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n          // Get the index of rd within w.\r\n          i %= LOG_BASE;\r\n\r\n          // Get the index of rd within w, adjusted for leading zeros.\r\n          // The number of leading zeros of w is given by LOG_BASE - digits.\r\n          j = i - LOG_BASE + digits;\r\n\r\n          // Get the rounding digit at index j of w.\r\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n        }\r\n      }\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      isTruncated = isTruncated || sd < 0 ||\r\n        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n      // will give 714.\r\n\r\n      roundUp = rm < 4\r\n        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n\r\n      if (sd < 1 || !xd[0]) {\r\n        xd.length = 0;\r\n        if (roundUp) {\r\n\r\n          // Convert sd to decimal places.\r\n          sd -= x.e + 1;\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n          x.e = -sd || 0;\r\n        } else {\r\n\r\n          // Zero.\r\n          xd[0] = x.e = 0;\r\n        }\r\n\r\n        return x;\r\n      }\r\n\r\n      // Remove excess digits.\r\n      if (i == 0) {\r\n        xd.length = xdi;\r\n        k = 1;\r\n        xdi--;\r\n      } else {\r\n        xd.length = xdi + 1;\r\n        k = mathpow(10, LOG_BASE - i);\r\n\r\n        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n        // j > 0 means i > number of leading zeros of w.\r\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n      }\r\n\r\n      if (roundUp) {\r\n        for (;;) {\r\n\r\n          // Is the digit to be rounded up in the first word of xd?\r\n          if (xdi == 0) {\r\n\r\n            // i will be the length of xd[0] before k is added.\r\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n            j = xd[0] += k;\r\n            for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n            // if i != k the length has increased.\r\n            if (i != k) {\r\n              x.e++;\r\n              if (xd[0] == BASE) xd[0] = 1;\r\n            }\r\n\r\n            break;\r\n          } else {\r\n            xd[xdi] += k;\r\n            if (xd[xdi] != BASE) break;\r\n            xd[xdi--] = 0;\r\n            k = 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n    }\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > Ctor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < Ctor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // Ctor.underflow = true;\r\n      } // else Ctor.underflow = false;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function finiteToString(x, isExp, sd) {\r\n    if (!x.isFinite()) return nonFiniteToString(x);\r\n    var k,\r\n      e = x.e,\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(digits, e) {\r\n    var w = digits[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n    if (sd > LN10_PRECISION) {\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(precisionLimitExceeded);\r\n    }\r\n    return finalise(new Ctor(LN10), sd, 1, true);\r\n  }\r\n\r\n\r\n  function getPi(Ctor, sd, rm) {\r\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n    return finalise(new Ctor(PI), sd, rm, true);\r\n  }\r\n\r\n\r\n  function getPrecision(digits) {\r\n    var w = digits.length - 1,\r\n      len = w * LOG_BASE + 1;\r\n\r\n    w = digits[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) len--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = digits[0]; w >= 10; w /= 10) len++;\r\n    }\r\n\r\n    return len;\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n   * integer of type number.\r\n   *\r\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n   *\r\n   */\r\n  function intPow(Ctor, x, n, pr) {\r\n    var isTruncated,\r\n      r = new Ctor(1),\r\n\r\n      // Max n of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (n % 2) {\r\n        r = r.times(x);\r\n        if (truncate(r.d, k)) isTruncated = true;\r\n      }\r\n\r\n      n = mathfloor(n / 2);\r\n      if (n === 0) {\r\n\r\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n        n = r.d.length - 1;\r\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n        break;\r\n      }\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, k);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  function isOdd(n) {\r\n    return n.d[n.d.length - 1] & 1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n   */\r\n  function maxOrMin(Ctor, args, ltgt) {\r\n    var y,\r\n      x = new Ctor(args[0]),\r\n      i = 0;\r\n\r\n    for (; ++i < args.length;) {\r\n      y = new Ctor(args[i]);\r\n      if (!y.s) {\r\n        x = y;\r\n        break;\r\n      } else if (x[ltgt](y)) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(Infinity)  = Infinity\r\n   *  exp(-Infinity) = 0\r\n   *  exp(NaN)       = NaN\r\n   *  exp(±0)        = 1\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   *  The result will always be correctly rounded.\r\n   *\r\n   */\r\n  function naturalExponential(x, sd) {\r\n    var denominator, guard, j, pow, sum, t, wpr,\r\n      rep = 0,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // 0/NaN/Infinity?\r\n    if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n      return new Ctor(x.d\r\n        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n        : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    // while abs(x) >= 0.1\r\n    while (x.e > -2) {\r\n\r\n      // x = x / 2^5\r\n      x = x.times(t);\r\n      k += 5;\r\n    }\r\n\r\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n    // necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(1);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = finalise(pow.times(x), wpr, 1);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        j = k;\r\n        while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n        // Check to see if the first 4 rounding digits are [49]999.\r\n        // If so, repeat the summation with a higher precision, otherwise\r\n        // e.g. with precision: 18, rounding: 1\r\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n\r\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += 10;\r\n            denominator = pow = t = new Ctor(1);\r\n            i = 0;\r\n            rep++;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(-n)        = NaN\r\n   *  ln(0)         = -Infinity\r\n   *  ln(-0)        = -Infinity\r\n   *  ln(1)         = 0\r\n   *  ln(Infinity)  = Infinity\r\n   *  ln(-Infinity) = NaN\r\n   *  ln(NaN)       = NaN\r\n   *\r\n   *  ln(n) (n != 1) is non-terminating.\r\n   *\r\n   */\r\n  function naturalLogarithm(y, sd) {\r\n    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // Is x negative or Infinity, NaN, 0 or 1?\r\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    Ctor.precision = wpr += guard;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n\r\n    if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = x.e;\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n      Ctor.precision = pr;\r\n\r\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n    }\r\n\r\n    // x1 is x reduced to a value near 1.\r\n    x1 = x;\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n    x2 = finalise(x.times(x), wpr, 1);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = finalise(numerator.times(x2), wpr, 1);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n        // been repeated previously) and the first 4 rounding digits 9999?\r\n        // If so, restart the summation with a higher precision, otherwise\r\n        // e.g. with precision: 12, rounding: 1\r\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += guard;\r\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n            x2 = finalise(x.times(x), wpr, 1);\r\n            denominator = rep = 1;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  // ±Infinity, NaN.\r\n  function nonFiniteToString(x) {\r\n    // Unsigned.\r\n    return String(x.s * x.s / 0);\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      x.e = e = e - i - 1;\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external) {\r\n\r\n        // Overflow?\r\n        if (x.e > x.constructor.maxE) {\r\n\r\n          // Infinity.\r\n          x.d = null;\r\n          x.e = NaN;\r\n\r\n        // Underflow?\r\n        } else if (x.e < x.constructor.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n          // x.constructor.underflow = true;\r\n        } // else x.constructor.underflow = false;\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n   */\r\n  function parseOther(x, str) {\r\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n    if (str === 'Infinity' || str === 'NaN') {\r\n      if (!+str) x.s = NaN;\r\n      x.e = NaN;\r\n      x.d = null;\r\n      return x;\r\n    }\r\n\r\n    if (isHex.test(str))  {\r\n      base = 16;\r\n      str = str.toLowerCase();\r\n    } else if (isBinary.test(str))  {\r\n      base = 2;\r\n    } else if (isOctal.test(str))  {\r\n      base = 8;\r\n    } else {\r\n      throw Error(invalidArgument + str);\r\n    }\r\n\r\n    // Is there a binary exponent part?\r\n    i = str.search(/p/i);\r\n\r\n    if (i > 0) {\r\n      p = +str.slice(i + 1);\r\n      str = str.substring(2, i);\r\n    } else {\r\n      str = str.slice(2);\r\n    }\r\n\r\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n    // fraction part will be restored.\r\n    i = str.indexOf('.');\r\n    isFloat = i >= 0;\r\n    Ctor = x.constructor;\r\n\r\n    if (isFloat) {\r\n      str = str.replace('.', '');\r\n      len = str.length;\r\n      i = len - i;\r\n\r\n      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n    }\r\n\r\n    xd = convertBase(str, base, BASE);\r\n    xe = xd.length - 1;\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xe; xd[i] === 0; --i) xd.pop();\r\n    if (i < 0) return new Ctor(x.s * 0);\r\n    x.e = getBase10Exponent(xd, xe);\r\n    x.d = xd;\r\n    external = false;\r\n\r\n    // At what precision to perform the division to ensure exact conversion?\r\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n    // Therefore using 4 * the number of digits of str will always be enough.\r\n    if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n    // Multiply by the binary exponent part if present.\r\n    if (p) x = x.times(Math.abs(p) < 54 ? Math.pow(2, p) : Decimal.pow(2, p));\r\n    external = true;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function sine(Ctor, x) {\r\n    var k,\r\n      len = x.d.length;\r\n\r\n    if (len < 3) return taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    // Max k before Math.pow precision loss is 22\r\n    x = x.times(Math.pow(5, -k));\r\n    x = taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Reverse argument reduction\r\n    var sin2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sin2_x = x.times(x);\r\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n    var j, t, u, x2,\r\n      i = 1,\r\n      pr = Ctor.precision,\r\n      k = Math.ceil(pr / LOG_BASE);\r\n\r\n    external = false;\r\n    x2 = x.times(x);\r\n    u = new Ctor(y);\r\n\r\n    for (;;) {\r\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      t = u.plus(y);\r\n\r\n      if (t.d[k] !== void 0) {\r\n        for (j = k; t.d[j] === u.d[j] && j--;);\r\n        if (j == -1) break;\r\n      }\r\n\r\n      j = u;\r\n      u = y;\r\n      y = t;\r\n      t = j;\r\n      i++;\r\n    }\r\n\r\n    external = true;\r\n    t.d.length = k + 1;\r\n\r\n    return t;\r\n  }\r\n\r\n\r\n  // Return the absolute value of `x` reduced to less than or equal to half pi.\r\n  function toLessThanHalfPi(Ctor, x) {\r\n    var t,\r\n      isNeg = x.s < 0,\r\n      pi = getPi(Ctor, Ctor.precision, 1),\r\n      halfPi = pi.times(0.5);\r\n\r\n    x = x.abs();\r\n\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isNeg ? 4 : 1;\r\n      return x;\r\n    }\r\n\r\n    t = x.divToInt(pi);\r\n\r\n    if (t.isZero()) {\r\n      quadrant = isNeg ? 3 : 2;\r\n    } else {\r\n      x = x.minus(t.times(pi));\r\n\r\n      // 0 <= x < pi\r\n      if (x.lte(halfPi)) {\r\n        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n        return x;\r\n      }\r\n\r\n      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n    }\r\n\r\n    return x.minus(pi).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n   *\r\n   * If the optional `sd` argument is present include a binary exponent suffix.\r\n   */\r\n  function toStringBinary(x, baseOut, sd, rm) {\r\n    var base, e, i, k, len, roundUp, str, xd, y,\r\n      Ctor = x.constructor,\r\n      isExp = sd !== void 0;\r\n\r\n    if (isExp) {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    } else {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    }\r\n\r\n    if (!x.isFinite()) {\r\n      str = nonFiniteToString(x);\r\n    } else {\r\n      str = finiteToString(x);\r\n      i = str.indexOf('.');\r\n\r\n      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n      // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n      if (isExp) {\r\n        base = 2;\r\n        if (baseOut == 16) {\r\n          sd = sd * 4 - 3;\r\n        } else if (baseOut == 8) {\r\n          sd = sd * 3 - 2;\r\n        }\r\n      } else {\r\n        base = baseOut;\r\n      }\r\n\r\n      // Convert the number as an integer then divide the result by its base raised to a power such\r\n      // that the fraction part will be restored.\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        str = str.replace('.', '');\r\n        y = new Ctor(1);\r\n        y.e = str.length - i;\r\n        y.d = convertBase(finiteToString(y), 10, base);\r\n        y.e = y.d.length;\r\n      }\r\n\r\n      xd = convertBase(str, 10, base);\r\n      e = len = xd.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xd[--len] == 0;) xd.pop();\r\n\r\n      if (!xd[0]) {\r\n        str = isExp ? '0p+0' : '0';\r\n      } else {\r\n        if (i < 0) {\r\n          e--;\r\n        } else {\r\n          x = new Ctor(x);\r\n          x.d = xd;\r\n          x.e = e;\r\n          x = divide(x, y, sd, rm, 0, base);\r\n          xd = x.d;\r\n          e = x.e;\r\n          roundUp = inexact;\r\n        }\r\n\r\n        // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        i = xd[sd];\r\n        k = base / 2;\r\n        roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n        roundUp = rm < 4\r\n          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n            rm === (x.s < 0 ? 8 : 7));\r\n\r\n        xd.length = sd;\r\n\r\n        if (roundUp) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (; ++xd[--sd] > base - 1;) {\r\n            xd[sd] = 0;\r\n            if (!sd) {\r\n              ++e;\r\n              xd.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n        // Add binary exponent suffix?\r\n        if (isExp) {\r\n          if (len > 1) {\r\n            if (baseOut == 16 || baseOut == 8) {\r\n              i = baseOut == 16 ? 4 : 3;\r\n              for (--len; len % i; len++) str += '0';\r\n              xd = convertBase(str, base, baseOut);\r\n              for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n              // xd[0] will always be be 1\r\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n            } else {\r\n              str = str.charAt(0) + '.' + str.slice(1);\r\n            }\r\n          }\r\n\r\n          str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n        } else if (e < 0) {\r\n          for (; ++e;) str = '0' + str;\r\n          str = '0.' + str;\r\n        } else {\r\n          if (++e > len) for (e -= len; e-- ;) str += '0';\r\n          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n        }\r\n      }\r\n\r\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  abs\r\n   *  acos\r\n   *  acosh\r\n   *  add\r\n   *  asin\r\n   *  asinh\r\n   *  atan\r\n   *  atanh\r\n   *  atan2\r\n   *  cbrt\r\n   *  ceil\r\n   *  clone\r\n   *  config\r\n   *  cos\r\n   *  cosh\r\n   *  div\r\n   *  exp\r\n   *  floor\r\n   *  hypot\r\n   *  ln\r\n   *  log\r\n   *  log2\r\n   *  log10\r\n   *  max\r\n   *  min\r\n   *  mod\r\n   *  mul\r\n   *  pow\r\n   *  random\r\n   *  round\r\n   *  set\r\n   *  sign\r\n   *  sin\r\n   *  sinh\r\n   *  sqrt\r\n   *  sub\r\n   *  tan\r\n   *  tanh\r\n   *  trunc\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function abs(x) {\r\n    return new this(x).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function acos(x) {\r\n    return new this(x).acos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function acosh(x) {\r\n    return new this(x).acosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function add(x, y) {\r\n    return new this(x).plus(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function asin(x) {\r\n    return new this(x).asin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function asinh(x) {\r\n    return new this(x).asinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function atan(x) {\r\n    return new this(x).atan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function atanh(x) {\r\n    return new this(x).atanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi, pi]\r\n   *\r\n   * y {number|string|Decimal} The y-coordinate.\r\n   * x {number|string|Decimal} The x-coordinate.\r\n   *\r\n   * atan2(±0, -0)               = ±pi\r\n   * atan2(±0, +0)               = ±0\r\n   * atan2(±0, -x)               = ±pi for x > 0\r\n   * atan2(±0, x)                = ±0 for x > 0\r\n   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n   * atan2(y, ±0)                = pi/2 for y > 0\r\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n   * atan2(±Infinity, +Infinity) = ±pi/4\r\n   * atan2(NaN, x) = NaN\r\n   * atan2(y, NaN) = NaN\r\n   *\r\n   */\r\n  function atan2(y, x) {\r\n    y = new this(y);\r\n    x = new this(x);\r\n    var r,\r\n      pr = this.precision,\r\n      rm = this.rounding,\r\n      wpr = pr + 4;\r\n\r\n    // Either NaN\r\n    if (!y.s || !x.s) {\r\n      r = new this(NaN);\r\n\r\n    // Both ±Infinity\r\n    } else if (!y.d && !x.d) {\r\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n      r.s = y.s;\r\n\r\n    // x is ±Infinity or y is ±0\r\n    } else if (!x.d || y.isZero()) {\r\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n      r.s = y.s;\r\n\r\n    // y is ±Infinity or x is ±0\r\n    } else if (!y.d || x.isZero()) {\r\n      r = getPi(this, wpr, 1).times(0.5);\r\n      r.s = y.s;\r\n\r\n    // Both non-zero and finite\r\n    } else if (x.s < 0) {\r\n      this.precision = wpr;\r\n      this.rounding = 1;\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n      x = getPi(this, wpr, 1);\r\n      this.precision = pr;\r\n      this.rounding = rm;\r\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n    } else {\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function cbrt(x) {\r\n    return new this(x).cbrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ceil(x) {\r\n    return finalise(x = new this(x), x.e + 1, 2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *   maxE       {number}\r\n   *   minE       {number}\r\n   *   modulo     {number}\r\n   *   crypto     {boolean|number}\r\n   *   defaults   {true}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n    var i, p, v,\r\n      useDefaults = obj.defaults === true,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -EXP_LIMIT, 0,\r\n        'toExpPos', 0, EXP_LIMIT,\r\n        'maxE', 0, EXP_LIMIT,\r\n        'minE', -EXP_LIMIT, 0,\r\n        'modulo', 0, 9\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n      if ((v = obj[p]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (v === true || v === false || v === 0 || v === 1) {\r\n        if (v) {\r\n          if (typeof crypto != 'undefined' && crypto &&\r\n            (crypto.getRandomValues || crypto.randomBytes)) {\r\n            this[p] = true;\r\n          } else {\r\n            throw Error(cryptoUnavailable);\r\n          }\r\n        } else {\r\n          this[p] = false;\r\n        }\r\n      } else {\r\n        throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cos(x) {\r\n    return new this(x).cos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cosh(x) {\r\n    return new this(x).cosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * v {number|string|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(v) {\r\n      var e, i, t,\r\n        x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      // Duplicate.\r\n      if (v instanceof Decimal) {\r\n        x.s = v.s;\r\n        x.e = v.e;\r\n        x.d = (v = v.d) ? v.slice() : v;\r\n        return;\r\n      }\r\n\r\n      t = typeof v;\r\n\r\n      if (t === 'number') {\r\n        if (v === 0) {\r\n          x.s = 1 / v < 0 ? -1 : 1;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        if (v < 0) {\r\n          v = -v;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 1;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (v === ~~v && v < 1e7) {\r\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n          x.e = e;\r\n          x.d = [v];\r\n          return;\r\n\r\n        // Infinity, NaN.\r\n        } else if (v * 0 !== 0) {\r\n          if (!v) x.s = NaN;\r\n          x.e = NaN;\r\n          x.d = null;\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, v.toString());\r\n\r\n      } else if (t !== 'string') {\r\n        throw Error(invalidArgument + v);\r\n      }\r\n\r\n      // Minus sign?\r\n      if (v.charCodeAt(0) === 45) {\r\n        v = v.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n    Decimal.EUCLID = 9;\r\n\r\n    Decimal.config = Decimal.set = config;\r\n    Decimal.clone = clone;\r\n    Decimal.isDecimal = isDecimalInstance;\r\n\r\n    Decimal.abs = abs;\r\n    Decimal.acos = acos;\r\n    Decimal.acosh = acosh;        // ES6\r\n    Decimal.add = add;\r\n    Decimal.asin = asin;\r\n    Decimal.asinh = asinh;        // ES6\r\n    Decimal.atan = atan;\r\n    Decimal.atanh = atanh;        // ES6\r\n    Decimal.atan2 = atan2;\r\n    Decimal.cbrt = cbrt;          // ES6\r\n    Decimal.ceil = ceil;\r\n    Decimal.cos = cos;\r\n    Decimal.cosh = cosh;          // ES6\r\n    Decimal.div = div;\r\n    Decimal.exp = exp;\r\n    Decimal.floor = floor;\r\n    Decimal.hypot = hypot;        // ES6\r\n    Decimal.ln = ln;\r\n    Decimal.log = log;\r\n    Decimal.log10 = log10;        // ES6\r\n    Decimal.log2 = log2;          // ES6\r\n    Decimal.max = max;\r\n    Decimal.min = min;\r\n    Decimal.mod = mod;\r\n    Decimal.mul = mul;\r\n    Decimal.pow = pow;\r\n    Decimal.random = random;\r\n    Decimal.round = round;\r\n    Decimal.sign = sign;          // ES6\r\n    Decimal.sin = sin;\r\n    Decimal.sinh = sinh;          // ES6\r\n    Decimal.sqrt = sqrt;\r\n    Decimal.sub = sub;\r\n    Decimal.tan = tan;\r\n    Decimal.tanh = tanh;          // ES6\r\n    Decimal.trunc = trunc;        // ES6\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      if (obj.defaults !== true) {\r\n        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n      }\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function div(x, y) {\r\n    return new this(x).div(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n   *\r\n   */\r\n  function exp(x) {\r\n    return new this(x).exp();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function floor(x) {\r\n    return finalise(x = new this(x), x.e + 1, 3);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n   *\r\n   */\r\n  function hypot() {\r\n    var i, n,\r\n      t = new this(0);\r\n\r\n    external = false;\r\n\r\n    for (i = 0; i < arguments.length;) {\r\n      n = new this(arguments[i++]);\r\n      if (!n.d) {\r\n        if (n.s) {\r\n          external = true;\r\n          return new this(1 / 0);\r\n        }\r\n        t = n;\r\n      } else if (t.d) {\r\n        t = t.plus(n.times(n));\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return t.sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  function isDecimalInstance(obj) {\r\n    return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ln(x) {\r\n    return new this(x).ln();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * log[y](x)\r\n   *\r\n   * x {number|string|Decimal} The argument of the logarithm.\r\n   * y {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  function log(x, y) {\r\n    return new this(x).log(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log2(x) {\r\n    return new this(x).log(2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log10(x) {\r\n    return new this(x).log(10);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function max() {\r\n    return maxOrMin(this, arguments, 'lt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function min() {\r\n    return maxOrMin(this, arguments, 'gt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mod(x, y) {\r\n    return new this(x).mod(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mul(x, y) {\r\n    return new this(x).mul(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The base.\r\n   * y {number|string|Decimal} The exponent.\r\n   *\r\n   */\r\n  function pow(x, y) {\r\n    return new this(x).pow(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n   * are produced).\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n   *\r\n   */\r\n  function random(sd) {\r\n    var d, e, k, n,\r\n      i = 0,\r\n      r = new this(1),\r\n      rd = [];\r\n\r\n    if (sd === void 0) sd = this.precision;\r\n    else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    k = Math.ceil(sd / LOG_BASE);\r\n\r\n    if (!this.crypto) {\r\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n    // Browsers supporting crypto.getRandomValues.\r\n    } else if (crypto.getRandomValues) {\r\n      d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n      for (; i < k;) {\r\n        n = d[i];\r\n\r\n        // 0 <= n < 4294967296\r\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n        if (n >= 4.29e9) {\r\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n        } else {\r\n\r\n          // 0 <= n <= 4289999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd[i++] = n % 1e7;\r\n        }\r\n      }\r\n\r\n    // Node.js supporting crypto.randomBytes.\r\n    } else if (crypto.randomBytes) {\r\n\r\n      // buffer\r\n      d = crypto.randomBytes(k *= 4);\r\n\r\n      for (; i < k;) {\r\n\r\n        // 0 <= n < 2147483648\r\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n        if (n >= 2.14e9) {\r\n          crypto.randomBytes(4).copy(d, i);\r\n        } else {\r\n\r\n          // 0 <= n <= 2139999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd.push(n % 1e7);\r\n          i += 4;\r\n        }\r\n      }\r\n\r\n      i = k / 4;\r\n    } else {\r\n      throw Error(cryptoUnavailable);\r\n    }\r\n\r\n    k = rd[--i];\r\n    sd %= LOG_BASE;\r\n\r\n    // Convert trailing digits to zeros according to sd.\r\n    if (k && sd) {\r\n      n = mathpow(10, LOG_BASE - sd);\r\n      rd[i] = (k / n | 0) * n;\r\n    }\r\n\r\n    // Remove trailing words which are zero.\r\n    for (; rd[i] === 0; i--) rd.pop();\r\n\r\n    // Zero?\r\n    if (i < 0) {\r\n      e = 0;\r\n      rd = [0];\r\n    } else {\r\n      e = -1;\r\n\r\n      // Remove leading words which are zero and adjust exponent accordingly.\r\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n      // Count the digits of the first word of rd to determine leading zeros.\r\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n      // Adjust the exponent for leading zeros of the first word of rd.\r\n      if (k < LOG_BASE) e -= LOG_BASE - k;\r\n    }\r\n\r\n    r.e = e;\r\n    r.d = rd;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n   *\r\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function round(x) {\r\n    return finalise(x = new this(x), x.e + 1, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if x > 0,\r\n   *  -1    if x < 0,\r\n   *   0    if x is 0,\r\n   *  -0    if x is -0,\r\n   *   NaN  otherwise\r\n   *\r\n   */\r\n  function sign(x) {\r\n    x = new this(x);\r\n    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sin(x) {\r\n    return new this(x).sin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sinh(x) {\r\n    return new this(x).sinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sqrt(x) {\r\n    return new this(x).sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function sub(x, y) {\r\n    return new this(x).sub(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tan(x) {\r\n    return new this(x).tan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tanh(x) {\r\n    return new this(x).tanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` truncated to an integer.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function trunc(x) {\r\n    return finalise(x = new this(x), x.e + 1, 1);\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(DEFAULTS);\r\n\r\n  Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Create the internal constants from their string values.\r\n  LN10 = new Decimal(LN10);\r\n  PI = new Decimal(PI);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () {\r\n      return Decimal;\r\n    });\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = Decimal;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalScope) {\r\n      globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;\r\n    }\r\n\r\n    noConflict = globalScope.Decimal;\r\n    Decimal.noConflict = function () {\r\n      globalScope.Decimal = noConflict;\r\n      return Decimal;\r\n    };\r\n\r\n    globalScope.Decimal = Decimal;\r\n  }\r\n})(this);\r\n","import Decimal from \"decimal.js\"\n\nlet prices: { [index: string]: Decimal } = {};\nlet divs: { [index: string]: Decimal } = {};\n\nasync function main(): Promise<void> {\n    // I hope my app will be rarely used, so it's ok to use third-party cors\n    // proxy and also dividend.com won't complain.\n    const proxy = 'https://cors-anywhere.herokuapp.com/';\n    let res = await fetch(proxy + 'https://www.dividend.com/search?q=VTI');\n    const base = proxy + res.headers.get('X-Final-Url');\n    res = await fetch(base + 'payouthistory.json');\n    let json = await res.json();\n    json['series'][0]['data'].forEach((v: any) => {\n        divs[v['parts']['Pay Date']] = new Decimal(v['y']);\n    });\n    res = await fetch(base + 'yieldhistory.json');\n    json = await res.json();\n    json['series'][0]['data'].forEach((v: any) => {\n        let d = new Date(v['x']);\n        prices[toISO(d)] = new Decimal(v['y']);\n    });\n}\n\nfunction toISO(d: Date): string {\n    return d.getFullYear() + '-' + (d.getMonth() + 1) + '-' + d.getDate();\n}\n\nmain();\n"],"sourceRoot":""}